{"version":3,"sources":["component/gameBoard.jsx","component/input.jsx","component/deployFleet.jsx","component/gameButton.jsx","component/app.jsx","index.js"],"names":["GameBoard","this","props","gridArray","map","cell","className","ship","sunk","bombed","cellLabel","String","fromCharCode","Math","floor","cellIndex","numberPart","toString","slice","id","onClick","handleClick","gameGrid","React","Component","Input","handleKeyPess","bind","e","code","key","value","target","row","col","i","length","charCode","charCodeAt","parseInt","document","getElementById","click","type","placeholder","onKeyPress","fleet","battleship","hitpoints","destroyer1","destroyer2","deployFleet","push","shipIndex","currentShip","currentShipCellPositions","shipNames","Object","keys","checkPlacement","r","c","abs","rowNumber","columnNumber","rowPart","columnPart","orientation","random","column","positionShips","GameButton","buttonText","gameState","handleBigButtonClick","Fragment","setButtonClass","App","state","shipsLeft","reduceHitpoints","setState","currentGridState","shipName","fleetStatus","gridStatus","newShipsLeft","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.42e21489.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass GameBoard extends React.Component {\r\n  gameGrid() {\r\n    //newGrid is an array created by mapping the attributes of gridArray into individual divs to be rendered\r\n    //the classnames are first modified for differential css styling - an example resulting class attribute is: 'square battleship bombed'\r\n\r\n    const newGrid = this.props.gridArray.map((cell) => {\r\n      let className = \"square\";\r\n      className += cell.ship ? \" ship\" : \"\";\r\n      className += cell.sunk ? \" sunk\" : \"\";\r\n      className += cell.bombed ? \" bombed\" : \"\";\r\n\r\n      //the index of the cell is then used to generate a string to label the div (eg 'A1')\r\n      let cellLabel = \"\";\r\n      if (!cell.bombed) {\r\n        cellLabel = String.fromCharCode(65 + Math.floor(cell.cellIndex / 10));\r\n        let cellIndexString = (cell.cellIndex + 1).toString();\r\n        let numberPart = cellIndexString.slice(-1);\r\n        if (numberPart === \"0\") {\r\n          numberPart = \"10\";\r\n        }\r\n        cellLabel += numberPart;\r\n      }\r\n      return (\r\n        <div\r\n          id={cell.cellIndex}\r\n          className={className}\r\n          onClick={this.props.handleClick}\r\n          key={cell.cellIndex}\r\n        >\r\n          {cellLabel}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return newGrid;\r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"grid\" id=\"grid\">\r\n        {this.gameGrid()}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\n\r\nclass Input extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.handleKeyPess = this.handleKeyPess.bind(this);\r\n  }\r\n\r\n  handleKeyPess(e) {\r\n    if (e.code === \"Enter\" || e.key === \"Enter\") {\r\n      let value = e.target.value;\r\n      e.target.value = \"\"; //reset the input field\r\n      let row = \"\";\r\n      let col = null;\r\n\r\n      for (let i = 0; i < value.length; i++) {\r\n        let character = value[i];\r\n        let charCode = character.charCodeAt(0); //convert to unicode integer\r\n        if (charCode >= 65 && charCode <= 75) {\r\n          col = charCode - 65; //use number inputs to update col variable\r\n        } else if (charCode >= 97 && charCode <= 107) {\r\n          col = charCode - 97;\r\n        } else if (charCode >= 48 && charCode <= 57) {\r\n          row += charCode - 48; //use letter inputs to update row variable\r\n        }\r\n      }\r\n      if (row !== \"\" && col !== null) {\r\n        row = parseInt(row); //where both a letter and a number have been input, parse the row variable to an int and subtract one (zero base)\r\n        row--;\r\n        if (row < 10 && row >= 0) {\r\n          if (col < 10 && col >= 0) {\r\n            let target = col * 10 + row; //where (0<= row,col <10), a valid input between A1 and J10 has been detected -> programmatically click on the\r\n            document.getElementById(target).click(); //...appropriate div so that App.state is modified by its handleClick function\r\n          }\r\n        }\r\n      }\r\n    } else if (e.target.value.length > 2) {\r\n      e.target.value = \"\"; //where the input is getting too large, reset it\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input\">\r\n        <h2>Choose a cell:</h2>\r\n        <input\r\n          className=\"inputArea\"\r\n          type=\"text\"\r\n          placeholder=\"eg 'A1'\"\r\n          onKeyPress={this.handleKeyPess}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","export function setShipHitpoints() {\r\n  //used to (re)set state at the start of the game\r\n  return {\r\n    battleship: {\r\n      hitpoints: 5,\r\n    },\r\n    destroyer1: {\r\n      hitpoints: 4,\r\n    },\r\n    destroyer2: {\r\n      hitpoints: 4,\r\n    },\r\n  };\r\n}\r\nconst fleet = setShipHitpoints(); //generate a fleet to use as a template when attempting to deploy ships below\r\n\r\nexport function deployFleet() {\r\n  let gridArray = []; //this is returned at the bottom of the function - it will contain the details of what is in each game cell\r\n\r\n  for (let i = 0; i < 100; i++) {\r\n    gridArray.push({\r\n      cellIndex: i,\r\n      ship: false, //initially a bool - may stay false, or may change to the name of the ship that is present\r\n      bombed: false, //initially false, true if bombed\r\n      sunk: false, //initially false, true if it contains a sunk ship cell\r\n    });\r\n  }\r\n\r\n  let shipNames = Object.keys(fleet); //get the names of the ships in fleet for easy iteration\r\n  let shipIndex; //an integer representing the ship that positionships() is currently attempting to place\r\n  let currentShip; //the ship the function is currently attempting to place\r\n  let currentShipCellPositions; //an object with an array that represent the row and column positions of the cells the ship is placed in\r\n\r\n  function positionShips() {\r\n    //randomly picks the top left row and orientation to deploy each of the ships in, then checks if the placement is valid and repeats if not\r\n    shipIndex = 0;\r\n    while (shipIndex < shipNames.length) {\r\n      //continue until all ships have been placed\r\n      currentShip = fleet[shipNames[shipIndex]];\r\n      currentShipCellPositions = [];\r\n\r\n      let orientation = Math.floor(2 * Math.random())\r\n        ? \"vertical\"\r\n        : \"horizontal\";\r\n      let row =\r\n        orientation === \"vertical\"\r\n          ? Math.floor(\r\n              (10 - currentShip.hitpoints) * Math.random() //only allow placements that do not go off the bottom of the grid\r\n            )\r\n          : Math.floor(10 * Math.random());\r\n      let column =\r\n        orientation === \"vertical\"\r\n          ? Math.floor(10 * Math.random())\r\n          : Math.floor(\r\n              (10 - currentShip.hitpoints) * Math.random() //only allow placements that do not go off the right side of the grid\r\n            );\r\n\r\n      for (let i = 0; i < currentShip.hitpoints; i++) {\r\n        //limit the number of cells to the length of the ship being placed\r\n        currentShipCellPositions.push(\r\n          orientation === \"vertical\"\r\n            ? { columnNumber: column, rowNumber: row + i } //eg. to give [{2,1},{2,2},{2,3},{2,4}]\r\n            : { columnNumber: column + i, rowNumber: row } //eg. to give [{2,1},{3,1},{4,1},{5,1}]\r\n        );\r\n      }\r\n      checkPlacement();\r\n    }\r\n  }\r\n\r\n  function checkPlacement() {\r\n    for (let r = 0; r < 10; r++) {\r\n      for (let c = 0; c < 10; c++) {\r\n        //go through each cell in gridArray\r\n        if (gridArray[r * 10 + c].ship !== false) {\r\n          //if there is already a ship present\r\n          for (let i = 0; i < currentShipCellPositions.length; i++) {\r\n            //go through each cell in the proposed position of the ship\r\n            if (Math.abs(currentShipCellPositions[i].rowNumber - r) < 2) {\r\n              if (Math.abs(currentShipCellPositions[i].columnNumber - c) < 2) {\r\n                return; //if placing the ship would cause ships to overlap or be too close, exit the function and try again\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //otherwise, get the index of each cell the new ship will be in, and adjust the gridArray.ship property at that index to reflect the added ship\r\n    for (let i = 0; i < currentShipCellPositions.length; i++) {\r\n      let rowPart = currentShipCellPositions[i].rowNumber * 10;\r\n      let columnPart = currentShipCellPositions[i].columnNumber;\r\n      gridArray[rowPart + columnPart].ship = shipNames[shipIndex];\r\n    }\r\n    shipIndex++; //move on to placing the next ship\r\n  }\r\n\r\n  positionShips();\r\n  return gridArray; //this is used to set App.state at the start of the game\r\n}\r\n","import React from \"react\";\r\n\r\nclass GameButton extends React.Component {\r\n  setButtonClass() {\r\n    let className = \"gameButton \"; //the className always contains 'gameButton', but will have additional strings added below based on App.state\r\n    let buttonText = \"\";\r\n\r\n    className += this.props.gameState === \"initial\" ? \"initial \" : \"\"; //css styles .gameButton .initial to visible\r\n    buttonText += this.props.gameState === \"initial\" ? \"Deploy Ships\" : \"\"; //...with the text saying 'Deploy Ships'\r\n    className += this.props.gameState === \"inplay\" ? \"inplay \" : \"\"; //midgame, the css sets .gameButton .inplay to invisible\r\n    className += this.props.gameState === \"final\" ? \"final \" : \"\"; //whilst at the end of the game it is visible again\r\n    buttonText +=\r\n      this.props.gameState === \"final\" ? \"Game over. Click to play again.\" : \"\"; //...but with the text changed to state 'Game over...'\r\n    return (\r\n      <button className={className} onClick={this.props.handleBigButtonClick}>\r\n        {buttonText}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <React.Fragment>{this.setButtonClass()}</React.Fragment>; //return the button with className and text updated by setButtonClass()\r\n  }\r\n}\r\n\r\nexport default GameButton;\r\n","import React from \"react\";\r\nimport Gameboard from \"./gameBoard.jsx\";\r\nimport Input from \"./input.jsx\";\r\nimport { deployFleet, setShipHitpoints } from \"./deployFleet.jsx\";\r\nimport GameButton from \"./gameButton.jsx\";\r\nimport \"./app.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      shipsLeft: Object.keys(setShipHitpoints()).length, //returns the number of ships the game starts with\r\n      gridArray: deployFleet(), //deployfleet randomly deploys the ships and returns a 100 long array describing the contents of each square\r\n      fleet: setShipHitpoints(), //the fleet object denotes how may hit points each ship has left before sinking\r\n      gameState: \"initial\", //initial is before the deploy button is pressed, inplay when deploy button is hidden, and final for end of game\r\n    };\r\n    this.reduceHitpoints = this.reduceHitpoints.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleBigButtonClick = this.handleBigButtonClick.bind(this);\r\n  }\r\n\r\n  handleBigButtonClick(e) {\r\n    if (this.state.gameState === \"initial\") {\r\n      this.setState({ gameState: \"inplay\" }); //clicking deploy moves game state from initial to inplay\r\n    } else if (this.state.gameState === \"final\") {\r\n      this.setState({\r\n        //clicking the buutton at the end of the game resets state to restart the game\r\n        shipsLeft: Object.keys(setShipHitpoints()).length,\r\n        gridArray: deployFleet(),\r\n        fleet: setShipHitpoints(),\r\n        gameState: \"initial\",\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClick(e) {\r\n    //deals with clicks on squares of the grid\r\n    if (this.state.gameState === \"inplay\") {\r\n      let cellIndex = e.target.id; //get the position of the index in gridArray\r\n      let currentGridState = this.state.gridArray;\r\n      if (!currentGridState[cellIndex].bombed) {\r\n        currentGridState[cellIndex].bombed = true; //if not bombed, mark as bombed\r\n        if (currentGridState[cellIndex].ship) {\r\n          this.reduceHitpoints(currentGridState[cellIndex].ship); //if bombed a ship, reduce its hitpoints\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        gridArray: currentGridState, //update state to re-render square if it changed\r\n      });\r\n    }\r\n  }\r\n\r\n  reduceHitpoints(shipName) {\r\n    //first reduce the hitpoints of the ship that was hit:\r\n    let fleetStatus = this.state.fleet;\r\n    fleetStatus[shipName].hitpoints--;\r\n    this.setState({\r\n      fleet: fleetStatus,\r\n    });\r\n    //if this hit sunk the ship, update girdArray to mark that it contains a sunk ship (as the CSS renders these to look different):\r\n    if (fleetStatus[shipName].hitpoints === 0) {\r\n      let gridStatus = this.state.gridArray;\r\n\r\n      for (let i = 0; i < gridStatus.length; i++) {\r\n        if (gridStatus[i].ship === shipName) {\r\n          gridStatus[i].sunk = true;\r\n        }\r\n      }\r\n      //update the state properties and cause a render. If no ships left, set state to final for end game message to show\r\n      let newShipsLeft = this.state.shipsLeft - 1;\r\n      this.setState(\r\n        {\r\n          gridArray: gridStatus,\r\n          shipsLeft: newShipsLeft,\r\n        },\r\n        () => {\r\n          if (this.state.shipsLeft === 0) {\r\n            this.setState({ gameState: \"final\" });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <h1>Sea Battle</h1>\r\n        <div className=\"outerGameArea\">\r\n          <div className=\"blankDiv\"></div>\r\n          <Gameboard //the 10x10 grid\r\n            handleClick={this.handleClick}\r\n            gridArray={this.state.gridArray} //pass down gridArray prop, as this is used by Gameboard as a template to render the grid\r\n          />\r\n          <GameButton //the large button that says 'Deploy Ships' at the start\r\n            gameState={this.state.gameState} //the visibility and text of the button are controlled by props from App.state\r\n            handleBigButtonClick={this.handleBigButtonClick}\r\n          />\r\n          <Input handleClick={this.handleClick} />\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./component/app.jsx\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}